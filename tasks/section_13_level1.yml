---

  - name: 13.1.1 Ensure Password Fields are Not Empty (check) (Scored)
    command: awk -F':' '($2 == "" ) { print $1 }' /etc/shadow
    register: awk_empty_shadow
    changed_when: False
    always_run: True
    failed_when: awk_empty_shadow.stdout != '' and lock_shadow_accounts == False
    tags:
      - section13
      - section13.1

  - name: 13.1.2 Ensure Password Fields are Not Empty (locking accounts) (Scored)
    command: passwd -l '{{ item }}'
    with_items: "{{awk_empty_shadow.stdout_lines}}"
    when: lock_shadow_accounts == True
    tags:
      - section13
      - section13.1

  - name: 13.2 Verify No Legacy "+" Entries Exist in /etc/passwd File (Scored)
    command: grep '^+:' /etc/passwd
    register: plus_pass
    failed_when: plus_pass.rc == 0
    changed_when: plus_pass.rc == 0
    tags:
      - section13
      - section13.2

  - name: 13.3 Verify No Legacy "+" Entries Exist in /etc/shadow File (Scored)
    command: grep '^+:' /etc/shadow
    register: plus_shadow
    failed_when: plus_shadow.rc == 0
    changed_when: plus_shadow.rc == 0
    tags:
      - section13
      - section13.3

  - name: 13.4 Verify No Legacy "+" Entries Exist in /etc/group File (Scored)
    command: grep '^+:' /etc/group
    register: plus_group
    failed_when: plus_group.rc == 0
    changed_when: plus_group.rc == 0
    tags:
      - section13
      - section13.4

  - name: 13.5 Verify No UID 0 Accounts Exist Other Than root (Scored)
    command: awk -F':' '($3 == 0) { print $1 }' /etc/passwd
    register: uid_zero_root
    changed_when: False
    failed_when: uid_zero_root.stdout != 'root'
    tags:
      - section13
      - section13.5

  - name: 13.6.1 Ensure root PATH Integrity (empty value) (Scored)
    shell: 'echo $PATH | grep ::'
    register: path_colon
    changed_when: False
    always_run: True
    failed_when: path_colon.rc == 0
    tags:
      - section13
      - section13.6

  - name: 13.6.2 Ensure root PATH Integrity (colon end) (Scored)
    shell: 'echo $PATH | grep :$'
    register: path_colon_end
    changed_when: False
    always_run: True
    failed_when: path_colon_end.rc == 0
    tags:
      - section13
      - section13.6

  - name: 13.6.3 Ensure root PATH Integrity (dot in path) (Scored)
    shell: "/bin/bash --login -c 'env | grep ^PATH=' | sed -e 's/PATH=//' -e 's/::/:/' -e 's/:$//' -e 's/:/\\n/g'"
    become: yes
    register: dot_in_path
    changed_when: False
    always_run: True
    failed_when: '"." in dot_in_path.stdout_lines'
    tags:
      - section13
      - section13.6

  - name: 13.6.4 Ensure root PATH Integrity (Scored)
    file: >
        path='{{ item }}'
        follow=yes
        state=directory
        owner=root
        mode='o-w,g-w'
    with_items: "{{dot_in_path.stdout_lines}}"
    tags:
      - section13
      - section13.6

  - name: 13.7.1 Check Permissions on User Home Directories (gather users) (Scored)
    shell: /bin/egrep -v '(root|halt|sync|shutdown|false)' /etc/passwd | /usr/bin/awk -F':' '($7 != "/usr/sbin/nologin") { print $6 }'
    register: home_users
    changed_when: False
    failed_when: False
    always_run: True
    tags:
      - section13
      - section13.7

  - name: 13.7.2 Check Permissions on User Home Directories (Scored)
    file: >
        path='{{ item }}'
        mode='g-w,o-rwx'
        state=directory
    with_items: "{{home_users.stdout_lines}}"
    when: modify_user_homes == True
    tags:
      - section13
      - section13.7

  - name: 13.8.1 Check User Dot File Permissions (check) (Scored)
    shell: for pth in `/bin/egrep -v '(root|halt|sync|shutdown)' /etc/passwd | /usr/bin/awk -F':' '($7 != "/usr/sbin/nologin") { print $6 }'`; do ls -d -A -1 $pth/.* | egrep -v '[..]$'; done
    changed_when: False
    failed_when: False
    always_run: True
    register: home_dot_files
    tags:
      - section13
      - section13.8

  - name: 13.8.2 Check User Dot File Permissions (Scored)
    file: >
        path='{{ item }}'
        follow=yes
        mode='o-w,g-w'
    with_items: "{{home_dot_files.stdout_lines}}"
    tags:
      - section13
      - section13.8

  - name: 13.9 Check Permissions on User .netrc Files (Scored)
    file: >
        path='{{ item }}/.netrc'
        mode='g-rwx,o-rwx'
        recurse=yes
        state=directory
    with_items: "{{home_users.stdout_lines}}"
    tags:
      - section13
      - section13.9

  - name: 13.10 Check for Presence of User .rhosts Files (Scored)
    file: >
        state=absent
        path='{{ item }}/.rhosts'
    with_items: "{{home_users.stdout_lines}}"
    tags:
      - section13
      - section13.10

  - name: 13.11.1 Check Groups in /etc/passwd (check) (Scored)
    command: cut -s -d':' -f4 /etc/passwd
    register: groups_id_cut
    changed_when: False
    always_run: True
    tags:
      - section13
      - section13.11

  - name: 13.11.2 Check Groups in /etc/passwd (Scored)
    command: grep -q -P "^.*?:[^:]*:{{ item }}:" /etc/group
    with_items: "{{groups_id_cut.stdout_lines}}"
    register: groups_present
    changed_when: False
    always_run: True
    tags:
      - section13
      - section13.11

  - name: 13.12 Check That Users Are Assigned Valid Home Directories (Scored)
    stat: path='{{ item }}'
    with_items: "{{home_users.stdout_lines}}"
    register: rstat
    failed_when: rstat is defined and rstat.stat.isdir == False
    always_run: True
    tags:
      - section13
      - section13.12

  - name: 13.13 Check User Home Directory Ownership (Scored)
    debug: msg="*** Hardcore ***"
    tags:
      - section13
      - section13.13

  - name: 13.14 Check for Duplicate UIDs (Scored)
    shell: cut -f3 -d':' /etc/passwd | sort | uniq -d
    register: uids_list
    failed_when: uids_list.stdout != ''
    changed_when: False
    always_run: True
    tags:
      - section13
      - section13.14

  - name: 13.15 Check for Duplicate GIDs (Scored)
    shell: cut -f3 -d':' /etc/group | sort | uniq -d
    register: gids_list
    failed_when: gids_list.stdout != ''
    changed_when: False
    always_run: True
    tags:
      - section13
      - section13.15

  - name: 13.16 Check for Duplicate User Names (Scored)
    shell: cut -f1 -d':' /etc/passwd | sort | uniq -d
    register: uids_list
    failed_when: uids_list.stdout != ''
    changed_when: False
    always_run: True
    tags:
      - section13
      - section13.16

  - name: 13.17 Check for Duplicate Group Names (Scored)
    shell: cut -f1 -d':' /etc/group | sort | uniq -d
    register: uids_list
    failed_when: uids_list.stdout != ''
    changed_when: False
    always_run: True
    tags:
      - section13
      - section13.17

  - name: 13.18.1 Check for Presence of User .netrc Files (check) (Scored)
    stat: path='{{ item }}/.netrc'
    with_items: '{{ home_users.stdout_lines }}'
    always_run: True
    changed_when: False
    register: netrc_files
    tags:
      - section13
      - section13.18

  - name: 13.18.2 Check for Presence of User .netrc Files (Scored)
    debug: msg='Check if {{ item.stat.path}} is needed, and remove otherwise'
    when: item is defined and item.stat.exists == True
    with_items: '{{ netrc_files.results }}'
    tags:
      - section13
      - section13.18

  - name: 13.19 Check for Presence of User .forward Files (Scored)
    file: >
        path='{{ item }}/.forward'
        state=absent
    with_items: "{{home_users.stdout_lines}}"
    tags:
      - section13
      - section13.19

  - name: 13.20.1 Ensure shadow group is empty (check) (Scored)
    shell: grep '^shadow' /etc/group | cut -f4 -d':'
    register: shadow_group_empty
    failed_when: shadow_group_empty.stdout != ''
    changed_when: False
    always_run: True
    tags:
      - section13
      - section13.20
      - section13.20.1

  - name: 13.20.2 Ensure shadow group is empty (check) (Scored)
    shell: grep '^shadow' /etc/group | cut -f1 -d':'
    register: shadow_group_id
    failed_when: False
    changed_when: False
    always_run: True
    tags:
      - section13
      - section13.20
      - section13.20.1

  - name: 13.20.3 Ensure shadow group is empty (check) (Scored)
    shell: awk -F':' '($4 == "{{ item }}") { print }' /etc/passwd
    register: awk_passwd_shadow
    with_items: "{{shadow_group_id.stdout_lines}}"
    changed_when: False
    failed_when: awk_passwd_shadow.stdout != ''
    always_run: True
    tags:
      - section13
      - section13.20
      - section13.20.2
