---

  - name: 9.1.1.1 Check that cron conf file exists (check) (Scored)
    stat: path=/etc/init/cron.conf
    register: cron_conf_stat
    tags:
      - section9
      - section9.1
      - section9.1.1
      - section9.1.1.1

  - name: 9.1.1.2 Enable cron Daemon (Scored)
    service: >
        name=cron
        state=started
        enabled=yes
    when: not cron_conf_stat.stat.exists
    tags:
      - section9
      - section9.1
      - section9.1.1
      - section9.1.1.2

  - name: 9.1.2 Set User/Group Owner and Permission on /etc/crontab (Scored)
    file: path='/etc/crontab' owner=root group=root mode="og-rwx"
    tags:
      - section9
      - section9.1
      - section9.1.2

  - name: 9.1.3 Set User/Group Owner and Permission on /etc/cron.hourly (Scored)
    file: path=/etc/cron.hourly owner=root group=root mode="og-rwx"
    tags:
      - section9
      - section9.1
      - section9.1.3

  - name: 9.1.4 Set User/Group Owner and Permission on /etc/cron.daily (Scored)
    file: path=/etc/cron.daily owner=root group=root mode="og-rwx"
    tags:
      - section9
      - section9.1
      - section9.1.4

  - name: 9.1.5 Set User/Group Owner and Permission on /etc/cron.weekly (Scored)
    file: path=/etc/cron.weekly owner=root group=root mode="og-rwx"
    tags:
      - section9
      - section9.1
      - section9.1.5

  - name: 9.1.6 Set User/Group Owner and Permission on /etc/cron.monthly (Scored)
    file: path=/etc/cron.monthly owner=root group=root mode="og-rwx"
    tags:
      - section9
      - section9.1
      - section9.1.6

  - name: 9.1.7 Set User/Group Owner and Permission on /etc/cron.d (Scored)
    file: path=/etc/cron.d owner=root group=root mode="og-rwx"
    tags:
      - section9
      - section9.1
      - section9.1.7

  - name: 9.1.8.1 Restrict at/cron to Authorized Users (remove deny) (Scored)
    file: path={{ item }} state=absent
    with_items:
        - /etc/cron.deny
        - /etc/at.deny
    tags:
      - section9
      - section9.1
      - section9.1.8

  - name: 9.1.8.2 Restrict at/cron to Authorized Users (create cron allow) (Scored)
    copy:
        dest: /etc/cron.allow
        owner: root
        group: root
        mode: "og-rwx"
        content: ""
        force: no
    tags:
      - section9
      - section9.1
      - section9.1.8

  - name: 9.1.8.3 Restrict at/cron to Authorized Users (create at allow) (Scored)
    copy:
        dest: /etc/at.allow
        owner: root
        group: root
        mode: "og-rwx"
        content: ""
        force: no
    tags:
      - section9
      - section9.1
      - section9.1.8

  - name: 9.2.1.1 Set Password Creation Requirement Parameters Using pam_cracklib (install) (Scored)
    apt: name=libpam-cracklib state=present
    when: use_pam_cracklib == True
    tags:
      - section9
      - section9.2
      - section9.2.1

  - name: 9.2.1.2 Set Password Creation Requirement Parameters Using pam_cracklib (Scored)
    lineinfile: >
        dest='/etc/pam.d/common-password'
        regexp="pam_cracklib.so"
        line="password required pam_cracklib.so retry=3 minlen=14 dcredit=-1 ucredit=-1 ocredit=-1 lcredit=-1"
        state=present
    when: use_pam_cracklib == True
    tags:
      - section9
      - section9.2
      - section9.2.1

#Note for section 9.2.2:
#If a user has been locked out because they have reached the maximum consecutive failure count
#defined by denied= in the pam_tally2.so module, the user can be unlocked by issuing the command
#/sbin/pam_tally2 -u username --reset
#This command sets the failed count to 0, effectively unlocking the user
  - name: 9.2.2 Set Lockout for Failed Password Attempts (Not Scored)
    lineinfile: >
        dest='/etc/pam.d/login'
        regexp='pam_tally2'
        line="auth required pam_tally2.so onerr=fail audit silent deny=5 unlock_time=900"
        state=present
    tags:
      - section9
      - section9.2
      - section9.2.2

  - name: 9.2.3 Limit Password Reuse (Scored)
    lineinfile: >
        dest='/etc/pam.d/common-password'
        regexp='remember=5'
        line="password sufficient pam_unix.so remember=5"
        state=present
    tags:
      - section9
      - section9.2
      - section9.2.3

  - name: 9.3 Check if ssh is installed (check) (Not Scored)
    stat: path='/etc/ssh/sshd_config'
    register: ssh_config_file
    tags:
      - section9
      - section9.3
      - section9.3.1

  - include: section_09_level1_03.yml
    when: ssh_config_file.stat.exists == True

  - name: 9.4.1 Restrict root Login to System Console (check) (Not Scored)
    stat: path=/etc/securetty
    register: securetty_file
    tags:
      - section9
      - section9.4

  - name: 9.4.2 Restrict root Login to System Console (Not Scored)
    debug: msg='*** Check /etc/securetty for console allowed for root access ***'
    when: securetty_file.stat.exists == True
    tags:
      - section9
      - section9.4

  - name: 9.5.1 Restrict Access to the su Command (Scored)
    lineinfile: >
        dest='/etc/pam.d/su'
        line='auth            required        pam_wheel.so use_uid'
        state=present
    tags:
      - section9
      - section9.5
      - section9.5.1
